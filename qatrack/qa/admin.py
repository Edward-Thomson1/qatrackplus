import datetime

import django.forms as forms
from django.utils.translation import ugettext as _

from django.contrib import admin
import qatrack.qa.models as models
import qatrack.settings as settings
import re

#============================================================================
class SaveUserMixin(object):
    """A Mixin to save creating user and modifiying user

    Set editable=False on the created_by and modified_by model you
    want to use this for.
    """

    #----------------------------------------------------------------------
    def save_model(self, request, obj, form, change):
        """set user and modified date time"""
        if not obj.pk:
            obj.created_by = request.user
            obj.created = datetime.datetime.now()
        obj.modified_by = request.user
        super(SaveUserMixin, self).save_model(request, obj, form, change)
        #obj.save()

#============================================================================
class BasicSaveUserAdmin(SaveUserMixin, admin.ModelAdmin):
    """manage reference values for task list items"""

#----------------------------------------------------------------------
def title_case_name(obj):
    return ("%s"%obj.name).title()
title_case_name.short_description = "Name"

#============================================================================
class CategoryAdmin(admin.ModelAdmin):
    """QA categories admin"""
    prepopulated_fields =  {'slug': ('name',)}


#============================================================================
class TaskListMembershipInline(admin.TabularInline):
    """Admin for managing task list item memberships
    Needed to enable many-to-many inlines
    see https://docs.djangoproject.com/en/dev/ref/contrib/admin/#working-with-many-to-many-models
    """
    model = models.TaskListMembership
    extra = 1

#============================================================================
#class TaskListItemInline(SaveUserMixin, admin.AllValuesFieldListFilter):
#    """Inline editor for TaskListItems"""
#    inlines = [TaskListMembershipInline]
#    model = models.TaskListItem

#============================================================================
class TaskListAdmin(SaveUserMixin, admin.ModelAdmin):
    prepopulated_fields =  {'slug': ('name',)}
    list_display = (title_case_name, "modified", "modified_by", "unit", "frequency", "active")
    #filter_horizontal= ("task_list_items", )

    inlines = [TaskListMembershipInline]
    #exclude = ("task_list_items", )

    class Media:
        js = (
            settings.STATIC_URL+"js/jquery-1.7.1.min.js",
            settings.STATIC_URL+"js/jquery-ui.min.js",
            settings.STATIC_URL+"js/collapsed_stacked_inlines.js",
            settings.STATIC_URL+"js/m2m_drag_admin.js",
        )

#============================================================================
class TaskListItemAdminForm(forms.ModelForm):
    """custom tasklistitem form to ensure valid shortname to be used in Python snippets"""
    VARIALBLE_RE = re.compile("^[a-zA-Z_]+[0-9a-zA-Z_]*")

    #----------------------------------------------------------------------
    def clean_short_name(self):
        """replace any dashes in short_name (short_name is an autogenerated slug field) with underscores"""
        short_name = self.cleaned_data["short_name"]
        if not self.VARIALBLE_RE.match(short_name):
            raise forms.ValidationError(
                _("Short names must contain only letters, numbers and underscores and start with a ltter or underscore")
            )
        return short_name

#============================================================================
class TaskListItemAdmin(SaveUserMixin, admin.ModelAdmin):
    form = TaskListItemAdminForm



admin.site.register([models.Reference, models.Tolerance], BasicSaveUserAdmin)
admin.site.register([models.Category], CategoryAdmin)
admin.site.register([models.TaskList],TaskListAdmin)
admin.site.register([models.TaskListItem],TaskListItemAdmin)
