# Generated by Django 2.1.15 on 2021-01-14 14:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import qatrack.qatrack_core.fields
import qatrack.qatrack_core.scheduling
import re


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('qa', '0057_auto_20200825_2233'),
        ('service_log', '0024_grouplinker_required'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceEventSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_date', models.DateTimeField(blank=True, help_text='Next time this service event schedule is due', null=True, verbose_name='due date')),
                ('auto_schedule', models.BooleanField(default=True, help_text='If this is checked, due_date will be auto set based on the assigned frequency', verbose_name='auto schedule')),
                ('active', models.BooleanField(default=True, help_text='Uncheck to disable scheduling of this service event template', verbose_name='active')),
                ('assigned_to', models.ForeignKey(help_text='QC group that this test list should nominally be performed by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='serviceeventschedule_assigned_to', to='auth.Group')),
                ('frequency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serviceeventschedules', to='qa.Frequency', verbose_name='frequency')),
            ],
            options={
                'verbose_name': 'service event schedule',
                'verbose_name_plural': 'Assign Service Event Templates to Units',
            },
            bases=(qatrack.qatrack_core.scheduling.SchedulingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ServiceEventTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_description', models.TextField(blank=True, help_text='Describe the problem leading to this service event', null=True, verbose_name='problem description')),
                ('work_description', models.TextField(blank=True, help_text='Describe the work done during this service event', null=True, verbose_name='work description')),
                ('is_review_required', models.BooleanField(blank=True, default=True, help_text='Check this option to make "Review" mandatory for Service Events created with this template', verbose_name='is review required')),
                ('name', models.CharField(help_text='Give this template a concise name', max_length=255, verbose_name='name')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='service_event_templates_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='service_event_templates_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('return_to_service_cycles', models.ManyToManyField(blank=True, help_text='Select the Return to Service QC that must be performed for this Service Event Type', related_name='service_event_templates', to='qa.TestListCycle', verbose_name='return to service test list cycles')),
                ('return_to_service_test_lists', models.ManyToManyField(blank=True, help_text='Select the Return to Service QC that must be performed for this Service Event Type', related_name='service_event_templates', to='qa.TestList', verbose_name='return to service test lists')),
            ],
            options={
                'verbose_name': 'service event template',
                'verbose_name_plural': 'service event templates',
                'ordering': ('name',),
            },
        ),
        migrations.AlterModelOptions(
            name='grouplinker',
            options={'verbose_name': 'group linker', 'verbose_name_plural': 'group linkers'},
        ),
        migrations.AlterModelOptions(
            name='grouplinkerinstance',
            options={'default_permissions': (), 'verbose_name': 'group linker instance', 'verbose_name_plural': 'group linker instances'},
        ),
        migrations.AlterModelOptions(
            name='hours',
            options={'default_permissions': (), 'permissions': (('can_have_hours', 'Can have hours'),), 'verbose_name': 'hours', 'verbose_name_plural': 'hours'},
        ),
        migrations.AlterModelOptions(
            name='returntoserviceqa',
            options={'default_permissions': ('add', 'change', 'delete'), 'ordering': ['-datetime_assigned'], 'permissions': (('view_returntoserviceqa', 'Can view Return To Service QC'), ('perform_returntoserviceqa', 'Can perform Return To Service QC')), 'verbose_name': 'return to service qc', 'verbose_name_plural': 'return to service qc'},
        ),
        migrations.AlterModelOptions(
            name='servicearea',
            options={'ordering': ('name',), 'verbose_name': 'service area', 'verbose_name_plural': 'service area'},
        ),
        migrations.AlterModelOptions(
            name='serviceevent',
            options={'default_permissions': ('add', 'change', 'delete'), 'get_latest_by': 'datetime_service', 'ordering': ['-datetime_service'], 'permissions': (('review_serviceevent', 'Can review service event'), ('view_serviceevent', 'Can review service event')), 'verbose_name': 'service event', 'verbose_name_plural': 'service events'},
        ),
        migrations.AlterModelOptions(
            name='serviceeventstatus',
            options={'ordering': ('order', 'pk'), 'verbose_name': 'service event status', 'verbose_name_plural': 'service event statuses'},
        ),
        migrations.AlterModelOptions(
            name='servicelog',
            options={'default_permissions': (), 'ordering': ('-datetime',), 'verbose_name': 'service event log', 'verbose_name_plural': 'service event logs'},
        ),
        migrations.AlterModelOptions(
            name='servicetype',
            options={'verbose_name': 'service type', 'verbose_name_plural': 'service types'},
        ),
        migrations.AlterModelOptions(
            name='thirdparty',
            options={'verbose_name': 'third party', 'verbose_name_plural': 'third parties'},
        ),
        migrations.AlterModelOptions(
            name='unitservicearea',
            options={'ordering': ('unit', 'service_area'), 'verbose_name': 'unit service area', 'verbose_name_plural': 'unit service area memberships'},
        ),
        migrations.AddField(
            model_name='serviceevent',
            name='due_date',
            field=models.DateTimeField(blank=True, help_text='When was this service event due when it was performed', null=True),
        ),
        migrations.AddField(
            model_name='serviceevent',
            name='include_for_scheduling',
            field=models.BooleanField(default=True, help_text='Should this instance be considered when calculating due dates?'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='description',
            field=models.TextField(blank=True, help_text='Describe the relationship between this group and service events.', null=True, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Select the group. Leave blank to allow choosing any user.', null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='group'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='help_text',
            field=models.CharField(blank=True, help_text='Message to display when selecting user in service event form.', max_length=64, null=True, verbose_name='help text'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='multiple',
            field=models.BooleanField(default=False, help_text='Allow selecting multiple users when using this group linker', verbose_name='multiple users'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='name',
            field=models.CharField(help_text='Enter this group\'s display name (ie: "Physicist reported to")', max_length=64, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='grouplinker',
            name='required',
            field=models.BooleanField(default=False, help_text='Force users to add user from this group linker when creating a service event', verbose_name='required'),
        ),
        migrations.AlterField(
            model_name='grouplinkerinstance',
            name='datetime_linked',
            field=models.DateTimeField(verbose_name='linked'),
        ),
        migrations.AlterField(
            model_name='grouplinkerinstance',
            name='group_linker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='service_log.GroupLinker', verbose_name='group linker'),
        ),
        migrations.AlterField(
            model_name='grouplinkerinstance',
            name='service_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceEvent', verbose_name='service event'),
        ),
        migrations.AlterField(
            model_name='grouplinkerinstance',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AlterField(
            model_name='hours',
            name='service_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceEvent', verbose_name='service event'),
        ),
        migrations.AlterField(
            model_name='hours',
            name='third_party',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='service_log.ThirdParty', verbose_name='third party'),
        ),
        migrations.AlterField(
            model_name='hours',
            name='time',
            field=models.DurationField(help_text='The time this person spent on this service event', verbose_name='time'),
        ),
        migrations.AlterField(
            model_name='hours',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AlterField(
            model_name='servicearea',
            name='name',
            field=models.CharField(help_text='Enter a short name for this service area', max_length=32, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='servicearea',
            name='units',
            field=models.ManyToManyField(related_name='service_areas', through='service_log.UnitServiceArea', to='units.Unit', verbose_name='units'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='datetime_created',
            field=models.DateTimeField(verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='datetime_modified',
            field=models.DateTimeField(blank=True, null=True, verbose_name='modified'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='datetime_status_changed',
            field=models.DateTimeField(blank=True, null=True, verbose_name='status changed'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='is_active',
            field=models.BooleanField(blank=True, default=True, verbose_name='is active'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='is_review_required',
            field=models.BooleanField(blank=True, default=True, verbose_name='review required'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='problem_description',
            field=models.TextField(help_text='Describe the problem leading to this service event', verbose_name='problem description'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='safety_precautions',
            field=models.TextField(blank=True, help_text='Describe any safety precautions taken', null=True, verbose_name='safety precautions'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='service_event_related',
            field=models.ManyToManyField(blank=True, help_text='Enter the service event IDs of any related service events.', related_name='_serviceevent_service_event_related_+', to='service_log.ServiceEvent', verbose_name='related service events'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='service_status',
            field=models.ForeignKey(help_text='The current status of this service event', on_delete=django.db.models.deletion.PROTECT, to='service_log.ServiceEventStatus', verbose_name='status'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='service_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='service_log.ServiceType', verbose_name='service type'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='test_list_instance_initiated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='serviceevents_initiated', to='qa.TestListInstance', verbose_name='initiating test list instance'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='unit_service_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='service_log.UnitServiceArea', verbose_name='unit service area'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='user_created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='user_modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='modified by'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='user_status_changed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='status last changed by'),
        ),
        migrations.AlterField(
            model_name='serviceevent',
            name='work_description',
            field=models.TextField(blank=True, help_text='Describe the work done during this service event', null=True, verbose_name='work description'),
        ),
        migrations.AlterField(
            model_name='serviceeventstatus',
            name='colour',
            field=models.CharField(default='rgba(60,141,188,1)', help_text='Choose a colour for this service event status', max_length=22, validators=[django.core.validators.RegexValidator(re.compile('^rgba\\(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),(0(\\.[0-9][0-9]?)?|1)\\)$'), 'Enter a valid color.', 'invalid')], verbose_name='colour'),
        ),
        migrations.AlterField(
            model_name='serviceeventstatus',
            name='description',
            field=models.TextField(blank=True, help_text='Give a brief description of this service event status', max_length=512, null=True, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='serviceeventstatus',
            name='is_default',
            field=models.BooleanField(default=False, help_text='Is this the default status for all service events? If set to true every other service event status will be set to false', verbose_name='is default'),
        ),
        migrations.AlterField(
            model_name='serviceeventstatus',
            name='is_review_required',
            field=models.BooleanField(default=True, help_text='Do service events with this status require review?', verbose_name='is review required'),
        ),
        migrations.AlterField(
            model_name='serviceeventstatus',
            name='name',
            field=models.CharField(help_text='Enter a short name for this service status', max_length=32, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='servicelog',
            name='datetime',
            field=models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='date and time'),
        ),
        migrations.AlterField(
            model_name='servicelog',
            name='extra_info',
            field=qatrack.qatrack_core.fields.JSONField(blank=True, null=True, verbose_name='extra info'),
        ),
        migrations.AlterField(
            model_name='servicelog',
            name='log_type',
            field=models.CharField(choices=[('new_se', 'New Service Event'), ('mod_se', 'Modified Service Event'), ('stat_se', 'Service Event Status Changed'), ('rtsqa', 'Changed Return To Service'), ('perf_rts', 'Performed Return To Service'), ('app_rts', 'Approved Return To Service'), ('del_se', 'Deleted Service Event')], max_length=10, verbose_name='log type'),
        ),
        migrations.AlterField(
            model_name='servicelog',
            name='service_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceEvent', verbose_name='service event'),
        ),
        migrations.AlterField(
            model_name='servicelog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AlterField(
            model_name='servicetype',
            name='description',
            field=models.TextField(blank=True, help_text='Give a brief description of this service type', max_length=512, null=True, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='servicetype',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Set to false if service type is no longer used', verbose_name='is active'),
        ),
        migrations.AlterField(
            model_name='servicetype',
            name='is_review_required',
            field=models.BooleanField(default=True, help_text='Enable this flag to disable the "Review Required" checkbox for new Service Events', verbose_name='is review required'),
        ),
        migrations.AlterField(
            model_name='servicetype',
            name='name',
            field=models.CharField(help_text='Enter a short name for this service type', max_length=32, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='thirdparty',
            name='first_name',
            field=models.CharField(help_text="Enter this person's first name", max_length=32, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='thirdparty',
            name='last_name',
            field=models.CharField(help_text="Enter this person's last name", max_length=32, verbose_name='last name'),
        ),
        migrations.AlterField(
            model_name='thirdparty',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='units.Vendor', verbose_name='vendor'),
        ),
        migrations.AlterField(
            model_name='unitservicearea',
            name='notes',
            field=models.TextField(blank=True, null=True, verbose_name='notes'),
        ),
        migrations.AlterField(
            model_name='unitservicearea',
            name='service_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceArea', verbose_name='service area'),
        ),
        migrations.AlterField(
            model_name='unitservicearea',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='units.Unit', verbose_name='unit'),
        ),
        migrations.AddField(
            model_name='serviceeventtemplate',
            name='service_area',
            field=models.ForeignKey(blank=True, help_text='Select the Service Area this Service Event Template applies to. Leave blank to create a generic template.', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceArea', verbose_name='service area'),
        ),
        migrations.AddField(
            model_name='serviceeventtemplate',
            name='service_type',
            field=models.ForeignKey(blank=True, help_text='Select the Service Type this Service Event Template applies to. Leave blank to create a generic template.', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceType', verbose_name='service type'),
        ),
        migrations.AddField(
            model_name='serviceeventschedule',
            name='last_instance',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_log.ServiceEvent', verbose_name='last instance'),
        ),
        migrations.AddField(
            model_name='serviceeventschedule',
            name='service_event_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.ServiceEventTemplate', verbose_name='service event template'),
        ),
        migrations.AddField(
            model_name='serviceeventschedule',
            name='unit_service_area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_log.UnitServiceArea', verbose_name='unit service area'),
        ),
        migrations.AddField(
            model_name='serviceeventschedule',
            name='visible_to',
            field=models.ManyToManyField(help_text='Select groups who will be able to see this test collection on this unit', related_name='serviceeventschedule_visible_to', to='auth.Group'),
        ),
        migrations.AddField(
            model_name='serviceevent',
            name='service_event_schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='service_log.ServiceEventSchedule', verbose_name='service event schedule'),
        ),
        migrations.AddField(
            model_name='serviceevent',
            name='service_event_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='service_log.ServiceEventTemplate', verbose_name='service event template'),
        ),
        migrations.AlterUniqueTogether(
            name='serviceeventschedule',
            unique_together={('unit_service_area', 'service_event_template', 'frequency')},
        ),
    ]
