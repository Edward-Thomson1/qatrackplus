# Generated by Django 2.1.15 on 2020-12-30 14:55
import os
from django.db import migrations
from django.db.migrations.recorder import MigrationRecorder


def alter_unique(apps, schema):
    from django.db import connection, transaction
    cursor = connection.cursor()

    cursor.execute("""
        SELECT top 1 
            TC.Constraint_Name 
        FROM information_schema.table_constraints TC
        INNER JOIN information_schema.constraint_column_usage CC on TC.Constraint_Name = CC.Constraint_Name
        WHERE 
            TC.constraint_type = 'Unique' 
        AND 
            TC.Constraint_Name LIKE 'parts_partsuppliercollection_part_id_supplier%'
        ORDER BY TC.Constraint_Name"""
                   )

    try:
        constraint_name = cursor.fetchone()[0]
        cursor.execute("ALTER TABLE parts_partsuppliercollection drop constraint %s" % constraint_name)
    except TypeError:
        pass

    columns = ['part_id', 'supplier_id', 'part_number']
    condition = ' AND '.join(["[%s] IS NOT NULL" % col for col in columns])
    PartSupplierCollection = apps.get_model("parts", "PartSupplierCollection")
    schema._create_unique_sql(PartSupplierCollection, columns, condition=condition)


class Migration(migrations.Migration):

    dependencies = [
        ('parts', '0013_auto_20201229_1302'),
    ]

    if os.name == "nt":
        operations = [
            migrations.RunPython(alter_unique),
        ]
    else:
        operations = [
            migrations.AlterUniqueTogether(
                name='partsuppliercollection',
                unique_together={('part', 'supplier', 'part_number')},
            ),
        ]

