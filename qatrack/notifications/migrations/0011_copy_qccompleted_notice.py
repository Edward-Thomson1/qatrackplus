# Generated by Django 2.1.7 on 2019-08-02 01:49

from django.db import migrations
from django.db.models import Count


def get_or_create_recipient_groups(ns, RecipientGroup):

    # first check if existing RecipientGroup matches
    rgs = RecipientGroup.objects.annotate(
        user_count=Count("users"),
        group_count=Count("groups"),
    ).filter(
        user_count=ns.users.count(),
        group_count=ns.groups.count(),
    )

    for user in ns.users.all():
        rgs = rgs.filter(users__pk=user.pk)

    for group in ns.groups.all():
        rgs = rgs.filter(groups__pk=group.pk)

    if rgs.first():
        return rgs.first()

    # no match, create a new one
    rg = RecipientGroup.objects.create(name="Recipient Group %d" % ns.pk)

    for user in ns.users.all():
        rg.users.add(user)

    for group in ns.groups.all():
        rg.useres.add(group)

    return rg


def get_or_create_testlistgroup(ns, TestListGroup):

    if ns.test_lists.count() == 0:
        return

    # first check if existing TestListGroup matches
    tgs = TestListGroup.objects.annotate(
        testlist_count=Count("test_lists"),
    ).filter(
        testlist_count=ns.test_lists.count(),
    )

    for tl in ns.test_lists.all():
        tgs = tgs.filter(test_lists__pk=tl.pk)

    if tgs.first():
        return tgs.first()

    # no match, create a new one
    tg = TestListGroup.objects.create(name="TestList Group %d" % ns.pk)

    for test_list in ns.test_lists.all():
        tg.test_lists.add(test_list)

    return tg


def get_or_create_unitgroup(ns, UnitGroup):

    if ns.units.count() == 0:
        return

    # first check if existing TestListGroup matches
    ugs = UnitGroup.objects.annotate(
        unit_count=Count("units"),
    ).filter(
        unit_count=ns.units.count(),
    )

    for u in ns.units.all():
        ugs = ugs.filter(units__pk=u.pk)

    if ugs.first():
        return ugs.first()

    # no match, create a new one
    ug = UnitGroup.objects.create(name="Unit Group %d" % ns.pk)

    for unit in ns.units.all():
        ug.units.add(unit)

    return ug


def copy_to_qccompletednotices(apps, schema):

    NotificationSubscription = apps.get_model("notifications", "NotificationSubscription")
    QCCompletedNotice = apps.get_model("notifications", "QCCompletedNotice")
    RecipientGroup = apps.get_model("notifications", "RecipientGroup")
    TestListGroup = apps.get_model("notifications", "TestListGroup")
    UnitGroup = apps.get_model("notifications", "UnitGroup")

    for ns in NotificationSubscription.objects.all():

        QCCompletedNotice.objects.create(
            notification_type=ns.notification_type,
            follow_up_days=ns.follow_up_days,
            recipients=get_or_create_recipient_groups(ns, RecipientGroup),
            test_lists=get_or_create_testlistgroup(ns, TestListGroup),
            units=get_or_create_unitgroup(ns, UnitGroup),
        )


class Migration(migrations.Migration):

    dependencies = [
        ('notifications', '0010_auto_20190801_2148'),
    ]

    operations = [
        migrations.RunPython(copy_to_qccompletednotices),
    ]
