# Generated by Django 2.1.7 on 2019-07-04 20:03

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import recurrence.fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('reports', '0004_auto_20190517_2210'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReportSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', recurrence.fields.RecurrenceField(help_text='Define the schedule this report should be sent with.', verbose_name='Schedule')),
                ('time', models.TimeField(choices=[(datetime.time(0, 0), '00:00'), (datetime.time(0, 15), '00:15'), (datetime.time(0, 30), '00:30'), (datetime.time(0, 45), '00:45'), (datetime.time(1, 0), '01:00'), (datetime.time(1, 15), '01:15'), (datetime.time(1, 30), '01:30'), (datetime.time(1, 45), '01:45'), (datetime.time(2, 0), '02:00'), (datetime.time(2, 15), '02:15'), (datetime.time(2, 30), '02:30'), (datetime.time(2, 45), '02:45'), (datetime.time(3, 0), '03:00'), (datetime.time(3, 15), '03:15'), (datetime.time(3, 30), '03:30'), (datetime.time(3, 45), '03:45'), (datetime.time(4, 0), '04:00'), (datetime.time(4, 15), '04:15'), (datetime.time(4, 30), '04:30'), (datetime.time(4, 45), '04:45'), (datetime.time(5, 0), '05:00'), (datetime.time(5, 15), '05:15'), (datetime.time(5, 30), '05:30'), (datetime.time(5, 45), '05:45'), (datetime.time(6, 0), '06:00'), (datetime.time(6, 15), '06:15'), (datetime.time(6, 30), '06:30'), (datetime.time(6, 45), '06:45'), (datetime.time(7, 0), '07:00'), (datetime.time(7, 15), '07:15'), (datetime.time(7, 30), '07:30'), (datetime.time(7, 45), '07:45'), (datetime.time(8, 0), '08:00'), (datetime.time(8, 15), '08:15'), (datetime.time(8, 30), '08:30'), (datetime.time(8, 45), '08:45'), (datetime.time(9, 0), '09:00'), (datetime.time(9, 15), '09:15'), (datetime.time(9, 30), '09:30'), (datetime.time(9, 45), '09:45'), (datetime.time(10, 0), '10:00'), (datetime.time(10, 15), '10:15'), (datetime.time(10, 30), '10:30'), (datetime.time(10, 45), '10:45'), (datetime.time(11, 0), '11:00'), (datetime.time(11, 15), '11:15'), (datetime.time(11, 30), '11:30'), (datetime.time(11, 45), '11:45'), (datetime.time(12, 0), '12:00'), (datetime.time(12, 15), '12:15'), (datetime.time(12, 30), '12:30'), (datetime.time(12, 45), '12:45'), (datetime.time(13, 0), '13:00'), (datetime.time(13, 15), '13:15'), (datetime.time(13, 30), '13:30'), (datetime.time(13, 45), '13:45'), (datetime.time(14, 0), '14:00'), (datetime.time(14, 15), '14:15'), (datetime.time(14, 30), '14:30'), (datetime.time(14, 45), '14:45'), (datetime.time(15, 0), '15:00'), (datetime.time(15, 15), '15:15'), (datetime.time(15, 30), '15:30'), (datetime.time(15, 45), '15:45'), (datetime.time(16, 0), '16:00'), (datetime.time(16, 15), '16:15'), (datetime.time(16, 30), '16:30'), (datetime.time(16, 45), '16:45'), (datetime.time(17, 0), '17:00'), (datetime.time(17, 15), '17:15'), (datetime.time(17, 30), '17:30'), (datetime.time(17, 45), '17:45'), (datetime.time(18, 0), '18:00'), (datetime.time(18, 15), '18:15'), (datetime.time(18, 30), '18:30'), (datetime.time(18, 45), '18:45'), (datetime.time(19, 0), '19:00'), (datetime.time(19, 15), '19:15'), (datetime.time(19, 30), '19:30'), (datetime.time(19, 45), '19:45'), (datetime.time(20, 0), '20:00'), (datetime.time(20, 15), '20:15'), (datetime.time(20, 30), '20:30'), (datetime.time(20, 45), '20:45'), (datetime.time(21, 0), '21:00'), (datetime.time(21, 15), '21:15'), (datetime.time(21, 30), '21:30'), (datetime.time(21, 45), '21:45'), (datetime.time(22, 0), '22:00'), (datetime.time(22, 15), '22:15'), (datetime.time(22, 30), '22:30'), (datetime.time(22, 45), '22:45'), (datetime.time(23, 0), '23:00'), (datetime.time(23, 15), '23:15'), (datetime.time(23, 30), '23:30'), (datetime.time(23, 45), '23:45')], help_text='Set the time of day this report should be sent (00:00-23:59)', verbose_name='Time of day')),
                ('emails', models.TextField(blank=True, help_text='Enter a comma separated list of extra emails this report should be sent to', verbose_name='Extra recipient emails')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='reportschedule_creator', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='Select which groups this report should be sent to.', related_name='scheduledreports', to='auth.Group')),
                ('modified_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='reportschedule_modifier', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterModelOptions(
            name='savedreport',
            options={'ordering': ('title', 'created'), 'permissions': (('can_run_reports', 'Can Run Reports'), ('can_create_reports', 'Can create Reports'), ('can_run_sql_reports', 'Can run SQL Data Reports'), ('can_create_sql_reports', 'Can create SQL Data Reports'))},
        ),
        migrations.AlterField(
            model_name='savedreport',
            name='report_type',
            field=models.CharField(choices=[('General', [('qc-summary-by-date', 'QC Summary'), ('utc', 'Test List Instances'), ('test_data', 'Test Instance Values')]), ('Scheduling', [('next_due', 'Next Due Dates for QC'), ('due_and_overdue', 'Due and Overdue QC')])], max_length=128),
        ),
        migrations.AddField(
            model_name='reportschedule',
            name='report',
            field=models.OneToOneField(help_text='Select the report this schedule pertains to', on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='reports.SavedReport'),
        ),
        migrations.AddField(
            model_name='reportschedule',
            name='users',
            field=models.ManyToManyField(blank=True, help_text='Select individual users this report should be sent to.', related_name='scheduledreports', to=settings.AUTH_USER_MODEL),
        ),
    ]
